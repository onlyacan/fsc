#include <stdio.h>
#include "main.h"



/* N: dimension of the matrix A
 * NNZ: number of non-zero elements
 * return: pointer to the spare matrix A
 *
 */
sm* sm_constr(id n, id nnz)
{
    sm *A = (sm*) malloc(sizeof(sm) * 1);
    A->n = n;
    A->nnz = nnz;
    A->data = (real *) smalloc(sizeof(real) * A->nnz, "In sm_constr: for A.data");
    A->col_ind = (id *) smalloc(sizeof(id) * A->nnz, "In sm_constr: for A.ind");
    A->raw_ptr = (id *) smalloc(sizeof(id) * (A->n + 1), "In sm_constr: for A.raw_ptr");
    A->raw_ptr = 0;
    
    return A;
}

/* Assign value to sparse matrix A
 * input: 
 * 	A: sparse matrix 
 * 	i: ith row, starting from 0 to n-1
 * 	js: j index for the non-zero elements in ith row
 * 	datas: non-zero datas in ith row
 * 	nnzi: number of non-zero elements in row i
*/
void sm_assign(sm *A, id i, id *js, real *datas, id nnzi)
{
    id k;
    real *data_ptr;    // the data ptr for the ith row
    id   *col_ind_ptr; // the data ptr for the ith row
    
    A->row_ptr[i+1] = A->row_ptr[i] + nnzi;
    if (nnzi <= 0) break;
    
    data_ptr = A-> data + A-> row_ptr[i];
    col_ind_ptr = A-> col_ind + A-> row_ptr[i];
    
    for (k=0; k < nnzi; k++){
	
	*(data_ptr + k)    = datas[k];
	*(col_ind_ptr + k) = js[k]; 
    }
  
}

void sm_print(sm *A)
{
    id i,j,k,n;
    
    n = A->n;
    
    id *markers = (id*) smalloc(sizeof(id)* n);
    for(j= 0; j< n; j++){
	markers[j] = -1;
    }
      
    
    for(i=0; i < n; i ++) { // for every line 
	for(k= A-> row_ptr[i]; k< A-> row_ptr[i+1]; k++){
	  j = A-> col_ind[k];
	  markers[j] = k;
	}
	
	for(j=0; j < n; j++){ // loop each col in a row 
	  if (markers[j] != -1) 
	      fprintf(stdout, "%6.2lf", A->data[markers[j]]);
	  else
	      fprintf(stdout, "%6s", "X");
	  
	}
	fprintf(stdout, "\n");
      
    }
    
    // restore the values
    for(j= 0; j< n; j++){
	markers[j] = -1;
    }    
  
}
