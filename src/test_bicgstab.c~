#include  "ssms.h"
#include  "main.h"
#include  "vector.h"
#include  "type.h"

#include <stdio.h>
#include <stdlib.h>



int main(void)
{
    sm *A;             /* the matrix */  
    sm_lil *A_lil;     /* the matrix in lil format*/
    id n,nnz;          /* n: dimension, nnz number of non-zero*/
    id *nnz_raw, nnz_raw_max; // from random number generator
    id i,j,k; 
    real a; 
    time_t t;
    id **js;
    double **vals;    
    real *b, *x, *x0; 
    real *work;

    printf("n(dimension), nnz_raw_max(max nz elem every line): \n");
    scanf("%li %li", &n, &nnz_raw_max);
    printf("n=%li, nnz_raw_max = %li\n", n, nnz_raw_max);



    js = (id **) malloc(sizeof(id *) * n); // n lists of js
    vals = (double **) malloc(sizeof(double *) * n); // n lists of vals
    nnz_raw = (int*) malloc(sizeof (int) * n);  

    
    printf("First construct a lil sparse matrix\n");
    A_lil = sm_lil_constr(n);
    printf("dimension of the sparse matrix = %li\n", A_lil -> n);
    printf("assign variable\n");

    for(i=0, srand((unsigned) time(&t)); i < n; i++){

        printf("for line %i, %d nnz elemen\n", i, (nnz_raw[i] = rand() %nnz_raw_max + 1));
        js[i] = malloc(sizeof (int) * nnz_raw[i]);
        vals[i] = malloc(sizeof (double) * nnz_raw[i]);

        printf("dimension of the sparse matrix = %li\n", A_lil -> n);
        for(k=0; k < nnz_raw[i]; k++){
            j = rand()%n;
            a = (rand()%1000)/1000.0 * 12345.0;
            printf("[%d %d] = %lf", i,  j, a );
            sm_lil_install(A_lil, i, j, a);
        }
        //sm_assign(A, i, js, vals, nnz_raw);
        printf("\n");
    }

    /*
    for(i=0; i < n; i++){
        sm_lil_install(A_lil, i,i, i*i);
    }
    */
    printf("convert A_lil to A\n");
    A = sm_lil_to_csr(A_lil);
    printf("then print A:\n");
    sm_fprint(stdout, A); 

    printf("create vector b and x");    
    b = (real*) malloc(sizeof (real) * n);  
    x = (real*) malloc(sizeof (real) * n);


    printf("assign initial value for x\n");      
    for(i=0; i < n; i++){
        x[i] = (real) i*10.0; 
    }

    for(i=0; i < n; i++){
        printf("%12.2lf\n", x[i]);
    }


    printf("make vector b\n");
    smv(A, x, b); 
    printf("b:\n");
    for(i=0; i < n; i++){
        printf("%12.2lf\n", b[i]);
    }
    

    x0 = vdump(n,x);

    printf("clearn x ==> x0, x\n"); 
    vassign(n,x,0.0);
    for(i=0; i < n; i++){
        printf("%12.2lf, %12.2lf\n", x0[i], x[i]);
    }

    int max_it = 100;
    double tol = 1.0e-10;
    double iter = 10;
    double error = 0.0;
    int flag = 1001;
    

    work = smalloc(sizeof(real) * A-> n*8, 'in test_bicgstab for work');
    flag = bicgstab(A, x, b, work, max_it, tol, &iter, &error);
    

    printf("after solution flag=%i, after %i iteration, solution x:\n", flag, iter );
    for(i=0; i < n; i++){
        printf("%12.2lf, %12.2lf\n", x0[i], x[i]);
    }
    
    

    return 0;
}
